/*
 * This file is generated by jOOQ.
 */
package ru.itis.agona.model.jooq.schema.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.itis.agona.model.jooq.schema.Keys;
import ru.itis.agona.model.jooq.schema.Public;
import ru.itis.agona.model.jooq.schema.tables.records.EatenFoodsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EatenFoods extends TableImpl<EatenFoodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eaten_foods</code>
     */
    public static final EatenFoods EATEN_FOODS_ENTITY = new EatenFoods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EatenFoodsRecord> getRecordType() {
        return EatenFoodsRecord.class;
    }

    /**
     * The column <code>public.eaten_foods.id</code>.
     */
    public final TableField<EatenFoodsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.eaten_foods.user_id</code>.
     */
    public final TableField<EatenFoodsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eaten_foods.food_id</code>.
     */
    public final TableField<EatenFoodsRecord, UUID> FOOD_ID = createField(DSL.name("food_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eaten_foods.weight</code>.
     */
    public final TableField<EatenFoodsRecord, Short> WEIGHT = createField(DSL.name("weight"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.eaten_foods.created_date</code>.
     */
    public final TableField<EatenFoodsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private EatenFoods(Name alias, Table<EatenFoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EatenFoods(Name alias, Table<EatenFoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eaten_foods</code> table reference
     */
    public EatenFoods(String alias) {
        this(DSL.name(alias), EATEN_FOODS_ENTITY);
    }

    /**
     * Create an aliased <code>public.eaten_foods</code> table reference
     */
    public EatenFoods(Name alias) {
        this(alias, EATEN_FOODS_ENTITY);
    }

    /**
     * Create a <code>public.eaten_foods</code> table reference
     */
    public EatenFoods() {
        this(DSL.name("eaten_foods"), null);
    }

    public <O extends Record> EatenFoods(Table<O> child, ForeignKey<O, EatenFoodsRecord> key) {
        super(child, key, EATEN_FOODS_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EatenFoodsRecord> getPrimaryKey() {
        return Keys.EATEN_FOODS_PKEY;
    }

    @Override
    public List<ForeignKey<EatenFoodsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EATEN_FOODS__FK_USER_ID, Keys.EATEN_FOODS__FK_FOOD_ID);
    }

    private transient Users _users;
    private transient Foods _foods;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.EATEN_FOODS__FK_USER_ID);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.foods</code> table.
     */
    public Foods foods() {
        if (_foods == null)
            _foods = new Foods(this, Keys.EATEN_FOODS__FK_FOOD_ID);

        return _foods;
    }

    @Override
    public EatenFoods as(String alias) {
        return new EatenFoods(DSL.name(alias), this);
    }

    @Override
    public EatenFoods as(Name alias) {
        return new EatenFoods(alias, this);
    }

    @Override
    public EatenFoods as(Table<?> alias) {
        return new EatenFoods(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EatenFoods rename(String name) {
        return new EatenFoods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EatenFoods rename(Name name) {
        return new EatenFoods(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EatenFoods rename(Table<?> name) {
        return new EatenFoods(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, Short, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super UUID, ? super Short, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super UUID, ? super Short, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
