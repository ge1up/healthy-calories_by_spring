/*
 * This file is generated by jOOQ.
 */
package ru.itis.agona.model.jooq.schema.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.itis.agona.model.jooq.schema.tables.FavoriteDishes;
import ru.itis.agona.model.jooq.schema.tables.pojos.FavoriteDishesEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FavoriteDishesRecord extends UpdatableRecordImpl<FavoriteDishesRecord> implements Record4<UUID, UUID, Short, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.favorite_dishes.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.favorite_dishes.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.favorite_dishes.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.favorite_dishes.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.favorite_dishes.times_eaten</code>.
     */
    public void setTimesEaten(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.favorite_dishes.times_eaten</code>.
     */
    public Short getTimesEaten() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.favorite_dishes.average_weight</code>.
     */
    public void setAverageWeight(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.favorite_dishes.average_weight</code>.
     */
    public Short getAverageWeight() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Short, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, Short, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return FavoriteDishes.FAVORITE_DISHES_ENTITY.ID;
    }

    @Override
    public Field<UUID> field2() {
        return FavoriteDishes.FAVORITE_DISHES_ENTITY.USER_ID;
    }

    @Override
    public Field<Short> field3() {
        return FavoriteDishes.FAVORITE_DISHES_ENTITY.TIMES_EATEN;
    }

    @Override
    public Field<Short> field4() {
        return FavoriteDishes.FAVORITE_DISHES_ENTITY.AVERAGE_WEIGHT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public Short component3() {
        return getTimesEaten();
    }

    @Override
    public Short component4() {
        return getAverageWeight();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public Short value3() {
        return getTimesEaten();
    }

    @Override
    public Short value4() {
        return getAverageWeight();
    }

    @Override
    public FavoriteDishesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public FavoriteDishesRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public FavoriteDishesRecord value3(Short value) {
        setTimesEaten(value);
        return this;
    }

    @Override
    public FavoriteDishesRecord value4(Short value) {
        setAverageWeight(value);
        return this;
    }

    @Override
    public FavoriteDishesRecord values(UUID value1, UUID value2, Short value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FavoriteDishesRecord
     */
    public FavoriteDishesRecord() {
        super(FavoriteDishes.FAVORITE_DISHES_ENTITY);
    }

    /**
     * Create a detached, initialised FavoriteDishesRecord
     */
    public FavoriteDishesRecord(UUID id, UUID userId, Short timesEaten, Short averageWeight) {
        super(FavoriteDishes.FAVORITE_DISHES_ENTITY);

        setId(id);
        setUserId(userId);
        setTimesEaten(timesEaten);
        setAverageWeight(averageWeight);
    }

    /**
     * Create a detached, initialised FavoriteDishesRecord
     */
    public FavoriteDishesRecord(FavoriteDishesEntity value) {
        super(FavoriteDishes.FAVORITE_DISHES_ENTITY);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
            setTimesEaten(value.getTimesEaten());
            setAverageWeight(value.getAverageWeight());
        }
    }
}
